Creating a Server w/ express

1.Create a new folder
2. npm init -y   (to create package.json)
3. npm i express (to load express)
4. .gitignore (input node_modules to bypass push to github)
5. create your server.js file
(within server.js)
6.  //load modules (Express)
const express = require("express")
7. //initialize express app
const app = express()
8. //assign the port we're using to a variable
const PORT = 3000
8a. //assigning the port#
app.listen(PORT, ()=>{
    console.log("Server running on port 3000")
})
9.  //Routes
app.get("/", (request, response)=>{
    // console.log(request)
    response.send("<h1>Welcome to Express Plants</h1>")
})


=====================================================================

React Template File (Index component)

const React = require("react")


class Index extends React.Component{
    render(){
        return(
            <div>
                <h1>Index</h1>

            </div>
        )
    }
}

module.exports = Index



==================================Setting up View Engine==========================================================
In terminal: 

npm i express-react-views

//Set up our view engine
//Below must be after: (const app = express())
//App settings
app.set("view engine", "jsx")
app.engine("jsx", require("express-react-views").createEngine())



=============================================================================================


//=====NOTE: USE MVC (models, views, and controllers) to better organize your data:
//One way to keep an app from getting messy is to separate it out into three sections

    // - Models
    //     - data (javascript variables)
    // - Views
    //     - how the data is displayed to the user (HTML)
    // - Controllers
    //     - the glue that connects the models with the views with logic


//This allows various developers to divide up a large code base:
    // - minimizes likelihood of developers overwriting each others code
    // - allows developers to specialize
    //     - one can focus just on getting good with dealing with data
    //     - one can focus just on getting good with html
    //     - one can focus just on getting good with connecting the two


//Think of MVC as a restaurant:
    // - Models are the cook
    //     - prepares food/data
    // - Views are the customer
    //     - consumes food/data
    // - Controllers are the waiter
    //     - brings food from cook to customer
    //     - has no idea how food/data is prepared
    //     - has no idea how the food/data is consumed





===================================================================================


// What is JSX ?
    // A Syntax that allows us to write our HTML, CSS and Javascript in the same file so that we can more easily create user interfaces React is one of the most well known users of JSX. But other libraries like Lit-HTML, and KofuJS use it as well.


// express-react-views
    // This is an Express view engine which renders React components on a server. It uses react because it was made by facebook. It renders static markup and does not support mounting those views on the client.

    // This is intended to be used as a replacement for existing server-side view solutions, like jade, ejs (Like we have been using), or handlebars.


//JSX USES
    // You can use JSX as a template language to tell your server how to dynamically change your HTML ( That's what we'll be doing for now)

    // You can also use JSX for very very sophisticated Dom Manipulation, and that's what we'll be doing in in 2 weeks after we have a good handle on servers.


//Small intro to React  (Look at Show.JSX for more info)

//A different way of Separating Concerns ( Component Driven Development )

// Lets Think of Games
    // Job is to fight          (Ex: HTML)
    // Job is to fish           (Ex: CSS)
    // Job is to heal people    (Ex: JavaScript)

// We could separate 1 big group of fishers, 1 big group of fighters, 1 big group of healers Each group runs itself and are just dependent upon each other to survive

// OR

// We could make a bunch of smaller self sufficient group with a few fishers, a few fighters, a few healers

// Not saying either is better but each has it's advantages.

//Install express-react-views
//Install react-dom
//input in terminal: npm install express-react-views react react-dom


//**====================understanding how React is used big picture:========================

From Norman park to Me (Direct Message) 02:17 PM
later we will just have a function called "header" for example and you would just put all the html/JavaScript you need for the header in that one function

Me to Norman park (Direct Message) 02:17 PM
would the function be in the Show.jsx file?

From Norman park to Me (Direct Message) 02:18 PM
yes but we would call it different
like header.jsx
footer.jsx
aboutme.jsx
how ever many sections you want in your page
then those components might have subcomponents
for like a video player

Me to Norman park (Direct Message) 02:19 PM
Ok, so we're using react to create all of the "components" of our page...then where would we call the components we create?
*created

From Norman park to Me (Direct Message) 02:20 PM
multiple ways to do it but the simplest would be another .js file called layout
<Container>
     <Header/>
     <main>{children}</main> 
     <Footer/>
    </Container>
would look something like that
but we would have to "import" all the files were using

Me to Norman park (Direct Message) 02:20 PM
Ok...that makes more sense

From Norman park to Me (Direct Message) 02:20 PM
at the top of that layout page
import React from 'react'
import Footer from '../components/Footer/Footer'
import Header from '../components/Header/Header'
import { Container } from './LayoutStyles'
then you just call the components as you need them

Me to Norman park (Direct Message) 02:20 PM
...starting to make more sense....thanks man!
From Norman park to Me (Direct Message) 02:21 PM
üëç
Me to Norman park (Direct Message) 02:21 PM
my brain works a little backwards...It helps me to understand the big picture first

From Norman park to Me (Direct Message) 02:21 PM
im sure youre not the only one. Took me awhile to get it too

Me to Norman park (Direct Message) 02:21 PM
...putting our convo in my notes...lol


STYLING:

Inline styling example:
    <div style = {{backgroundColor: "#fff"}}> </div>


Using styling objects example:

const styles = {
    container: {backgroundColor:"#33d9b2"},
    header: {color:"#fff"}
    }

<h1 style={styles.header}></h1>



===========================================================================

MongoDB and Mongoose

https://ps-rtt-sei.herokuapp.com/mod-2/week-8/day-3/slides/ 

Attaching a database to your Express app with MongoDB (and Mongoose)

MongoDB is the database.

Mongoose is the middleman (or manager) that will handle the data for us between MongoDB and our app. 


We define Mongoose schemas (blueprints), which are then compiled using the mongoose.model method into Models.
We use a Model to perform all CRUD for a given MongoDB collection. 


MongoDB and Mongoose
https://ps-rtt-sei.herokuapp.com/mod-2/week-8/day-3/slides/

https://ps-rtt-sei.herokuapp.com/mod-2/week-9/day-1/slides/ 

============= creating environmental file ==================

1. Install in terminal (dotenv)
 npm i dotenv

2. Create a .env file in the root of the project

3. add .env to your .gitignore file

- .env is used to create environmental files.  
- Stores userName and password to your database.
- you can reuse the .env code
Example:

MONGO_URI=mongodb+srv://USERNAME:PASSWORD@cluster0.lkbzzlk.mongodb.net/?retryWrites=true&w=majority


============== Installing Mongoose =================

1. npm i mongoose

2. const mongoose = require('mongoose');

    //... and then farther down the file (inside of app.listen)
    mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });
    mongoose.connection.once('open', ()=> {
        console.log('connected to mongo');
    });


3. Before connecting to database, we need to create a schema.

Example in FruitsModel.js: 

(Import Mongoose)
const mongoose = require('mongoose');


(CREATE SCHEMA aka blueprint for the data)
    - below are the details about the data we're passing

const fruitSchema = new mongoose.Schema({
    name:  { type: String, required: true },
    color:  { type: String, required: true },
    readyToEat: Boolean
});


(CREATE MODEL)
const Fruit = mongoose.model('Fruit', fruitSchema);


(Exporting your Model)
module.exports = Fruit;



Model.find()
https://mongoosejs.com/docs/api.html#model_Model-find 

empty {} will return all documents in database





================ Deleting with npm method-override =======================

with npm.js package method-override

1. in terminal:
    npm install method-override


2. //Importing method override
const methodOverride = require("method-override")


3. //Middleware to override for deleting 
app.use(methodOverride("_method"))


4. <form action={`/fruits/${fruit._id}?_method=DELETE`} method="POST">
            <input type="submit" value="Delete" />
   </form>





cut from Pokemon assignment edit.jsx


class Edit extends React.Component{
    render(){
        console.log("from edit page", this.props.pokemon)
        const {pokemon} = this.props
        return(
            <body style={styles.body}>
                
                <h1>Edit Pokemon</h1>

                


                <form style={styles.form} action={`/pokemon/${pokemon._id}?_method=PUT`} method="POST">
                
                
                Name:<input style={styles.name} type="text" name="name" defaultValue={pokemon.name}/>
                <br/>
                Type:<input style={styles.type}  type="text" name="type" defaultValue={pokemon.type}/>
                <br/>
                Number:<input style={styles.number} type="text" name="number" defaultValue={pokemon.number}/>
                <br/>
                Image:<input style={styles.image}  type="text" name="image" placeholder="image url" defaultValue={pokemon.image}/>
                <br/>
                Is Cool:<input style={styles.isCool}  type="checkbox" name="isCool" defaultChecked={pokemon.isCool}/>
                <br/>
                Height:<input style={styles.height}  type="text" name="height" placeholder="Ex: 2ft. 4 in." defaultValue={pokemon.height}/>
                <br/>
                Weight:<input style={styles.weight}  type="text" name="weight" placeholder="Ex: 15.2 lbs." defaultValue={pokemon.weight}/>
                <br/>
                Abilities:<input style={styles.abilities}  type="text" name="abilities" defaultValue={pokemon.abilities}/>
                <br/>
                
                <input style={styles.button} type="submit" value="Edit Pokemon" />
                
                </form>
                

            </body>
        )
    }
}

module.exports = Edit

                   